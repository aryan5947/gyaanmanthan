// üìå Listen for push events
self.addEventListener("push", (event) => {
  let data = {};
  try {
    data = event.data ? event.data.json() : {};
  } catch (e) {
    console.error("‚ùå Push event data parse error:", e);
  }

  const title = data.title || "üîî New Notification";
  const options = {
    body: data.body || "You have a new message",
    icon: data.icon || "/icon.png", // ‚úÖ public/icon.png ‡§∏‡•á serve ‡§π‡•ã‡§ó‡§æ
    badge: "/icon.png",             // optional: ‡§õ‡•ã‡§ü‡•á badge ‡§ï‡•á ‡§≤‡§ø‡§è
    data: {
      url: data.url || "/",         // ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ redirect
    },
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

// üìå Handle notification click
self.addEventListener("notificationclick", (event) => {
  event.notification.close();
  const targetUrl = event.notification.data.url || "/";

  event.waitUntil(
    clients.matchAll({ type: "window", includeUncontrolled: true }).then((clientList) => {
      // ‡§Ö‡§ó‡§∞ tab ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡•Å‡§≤‡§æ ‡§π‡•à ‡§§‡•ã ‡§â‡§∏‡•Ä ‡§™‡§∞ focus ‡§ï‡§∞‡•ã
      for (const client of clientList) {
        if (client.url === targetUrl && "focus" in client) {
          return client.focus();
        }
      }
      // ‡§µ‡§∞‡§®‡§æ ‡§®‡§Ø‡§æ tab ‡§ñ‡•ã‡§≤‡•ã
      if (clients.openWindow) {
        return clients.openWindow(targetUrl);
      }
    })
  );
});
